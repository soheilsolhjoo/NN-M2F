function [Y,Xf,Af] = netFcn(X,~,~)
%NETFCN neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 23-Aug-2018 15:31:29.
% 
% [Y] = netFcn(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 0;
x1_step1.gain = 2;
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.2331650311832484945;-1.8534005300867182342;0.37171248405505208368;-5.3913728407969605527];
IW1_1 = [4.3486852475527291162;1.7811488781001498793;0.55348457993771060792;-3.8683524432342082378];

% Layer 2
b2 = [-2.7505303206879916367;-0.31118817730058662141;2.4263765874173794934];
LW2_1 = [0.18059897243039635395 0.44654030386170651123 1.6797400342346737734 -1.7649989328324051652;0.66561540831778609473 -0.29549659468472666557 -1.1562732833758548878 0.052967542915231445588;0.021583755501849426206 -1.0449273951358553081 0.064952170212388068982 -1.3557824303581875736];

% Layer 3
b3 = [1.3319933641381176415;1.6671150760804414048];
LW3_2 = [-1.5508478424855232092 0.53242300257854990875 0.81836946123260534414;1.3440984454581468288 -1.3071802986342959674 -1.1884459257320574288];

% Layer 4
b4 = 0.20836408570433107013;
LW4_3 = [-0.88808615067962504153 1.6565370363349731786];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0181690135872346;
y1_step1.xoffset = 646;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = tansig_apply(repmat(b3,1,Q) + LW3_2*a2);
    
    % Layer 4
    a4 = repmat(b4,1,Q) + LW4_3*a3;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a4,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(4,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
